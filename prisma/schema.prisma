// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  username      String?  @unique
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?

  // シナリオ・セッションの所有
  scenarios     Scenario[]
  sessions      Session[]
  participations SessionParticipant[]

  accounts      Account[]
  userSessions  UserSession[]
  comments      Comment[]
  // このユーザーが受け取った通知
  notificationsTo   Notification[] @relation("NotificationsToUser")
  // このユーザーが送信した通知
  notificationsFrom Notification[] @relation("NotificationsFromUser")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rulebook {
  id          String    @id @default(cuid())
  name        String
  system      String
  publisher   String?
  url         String?
  description String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 関連するシナリオたち
  scenarios   Scenario[]
}

// ジャンルenum
enum Genre {
  MADAMIS
  TRPG
  OTHER
}

// シナリオ管理機能
model Scenario {
  id            String    @id @default(cuid())
  title         String
  playerMin     Int
  playerMax     Int
  requiresGM    Boolean
  genre         Genre
  averageTime   Int       // 所要時間（分）
  distribution  String?   // 配布先URL
  content       String?   // シナリオ内容（Markdownなど）
  isPublic      Boolean   @default(true)

  priceMax      Int?      // 価格上限（円）
  priceMin      Int?      // 価格下限（円）

  rulebook      Rulebook? @relation(fields: [rulebookId], references: [id])
  rulebookId    String?   

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 所有者
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String

  sessions      Session[]
}

model Session {
  id            String     @id @default(cuid())
  title         String?    // セッション名（任意）
  scenario      Scenario   @relation(fields: [scenarioId], references: [id])
  scenarioId    String

  scheduledAt   DateTime
  isFinished    Boolean    @default(false)
  notes         String?    // 感想や補足

  // 所有者（記録を残す人）
  owner         User       @relation(fields: [ownerId], references: [id])
  ownerId       String

  createdAt     DateTime   @default(now())

  participants  SessionParticipant[]
  comments  Comment[]
}

enum ParticipantRole {
  GM
  KP
  PL
  PC
  SPECTATOR // 見学者なども定義しておくと便利
  UNDECIDED // 役割未定義の参加者
}

model SessionParticipant {
  session     Session   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId   String

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  character   String?

  role        ParticipantRole   // GM / キャラ名なども書ける♪
  assignedAt  DateTime  @default(now())
  
  youtubeLink String?  // YouTube動画のURLを保存するフィールド（任意）

  @@id([sessionId, userId]) // セッション×ユーザで一意に
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.Text // コメント本文
  createdAt DateTime @default(now()) // 投稿日時

  // --- リレーション定義 ---
  sessionId String   // どのセッションへのコメントか
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  userId    String   // 誰が投稿したか
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([userId])
}

model Notification {
  id         String   @id @default(cuid())
  toUserId   String   // 通知先のユーザーID
  fromUserId String   // 通知元のユーザーID
  message    String   // 通知メッセージ本文
  linkUrl    String?  // (任意) 通知クリック時の遷移先URL
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  // リレーション定義
  toUser   User @relation("NotificationsToUser", fields: [toUserId], references: [id], onDelete: Cascade)
  fromUser User @relation("NotificationsFromUser", fields: [fromUserId], references: [id], onDelete: Cascade)

  @@index([toUserId])
}