// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?

  // シナリオ・セッションの所有
  scenarios     Scenario[]
  sessions      Session[]
  participations SessionParticipant[]

  accounts      Account[]
  userSessions  UserSession[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model UserSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// シナリオ管理機能
model Scenario {
  id            String    @id @default(cuid())
  title         String
  playerMin     Int
  playerMax     Int
  requiresGM    Boolean
  averageTime   Int       // 所要時間（分）
  distribution  String?   // 配布先URL
  isPublic      Boolean   @default(true)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 所有者
  owner         User      @relation(fields: [ownerId], references: [id])
  ownerId       String

  sessions      Session[]
}

model Session {
  id            String     @id @default(cuid())
  scenario      Scenario   @relation(fields: [scenarioId], references: [id])
  scenarioId    String

  scheduledAt   DateTime
  isFinished    Boolean    @default(false)
  notes         String?    // 感想や補足

  // 所有者（記録を残す人）
  owner         User       @relation(fields: [ownerId], references: [id])
  ownerId       String

  createdAt     DateTime   @default(now())

  participants  SessionParticipant[]
}

model SessionParticipant {
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   String

  user        User      @relation(fields: [userId], references: [id])
  userId      String

  role        String?   // GM / キャラ名なども書ける♪

  @@id([sessionId, userId]) // セッション×ユーザで一意に
}